---
- include_vars: encrypted.yml

- name: Ensure that deploy owns /srv/www and /srv/www/shared
  file:
    state: directory
    owner: deploy
    group: deploy
    path: "{{item}}"
  with_items:
    - /srv/www
    - /srv/www/shared

# Installing via bash so that rbenv is used. Otherwise would install gems for default system ruby
# TODO When gem is already installed stop it from saying something has changed
- name: Install bundler gem
  command: bash -lc "gem install bundler"
  sudo: true
  sudo_user: deploy

- name: Add mySociety Debian Package Repository key
  apt_key: url="https://debian.mysociety.org/debian.mysociety.org.gpg.key"

- name: Add mySociety Debian Package Repository
  apt_repository: repo="deb http://debian.mysociety.org squeeze main"

- name: Install packages required by Alaveteli
  apt: name={{ item }} state=present
  with_items:
    - libicu-dev
    - libmagic-dev
    - libmagickwand-dev
    - xapian-tools
    - uuid-dev
    - wkhtmltopdf-static
    - pdftk
    - imagemagick
    - wv
    - language-pack-ro
    - unzip
    - poppler-utils
  tags:
    - apt-get
    - packages

- name: Install lockfile-progs for run-with-lockfile.sh
  apt: name=lockfile-progs

- name: Link run-with-lockfile.sh so is not available system-wide
  file:
    src: "/srv/www/current/commonlib/bin/run-with-lockfile.sh"
    dest: "/usr/bin/run-with-lockfile"
    state: link
    force: yes

- name: Create database
  postgresql_db: name=alaveteli

- name: Create posgresql role
  postgresql_user: db=alaveteli name=alaveteli password={{ db_password }}

- name: Copy over database configuration for application
  template: src=database.yml dest=/srv/www/shared/database.yml owner=deploy group=deploy
  notify: nginx reload
  tags: nginx

- name: Copy init scripts for daemons
  copy:
    dest: /etc/init.d/
    src: "{{ item }}"
    mode: 0755
  with_items:
    - foi-alert-tracks
    - foi-purge-varnish

- name: Create ACME nginx folder
  file: path=/etc/letsencrypt/webrootauth/.well-known/acme-challenge state=directory mode=0755
  tags: nginx
  notify: nginx reload

- name: Generate the overall nginx config
  template: src=nginx.conf dest=/etc/nginx/nginx.conf
  tags: nginx
  notify: nginx reload

- name: Copy test/test password for staging site
  copy:
    src: htpasswd
    dest: /etc/nginx/
  notify: nginx reload
  tags: nginx

- name: Create LE user
  user:
    name: '{{ letsencrypt_user }}'
    home: '{{ acme_tiny_data_directory }}'
    system: yes

- name: Create LE group
  group:
    name: '{{ letsencrypt_group }}'
    system: yes

- name: Ensure letsencrypt challange dir exists
  file:
    path: "{{ acme_tiny_challenges_directory }}"
    state: directory
    owner: "{{ letsencrypt_user }}"
    group: "{{ letsencrypt_group }}"
    mode: 0755
  tags:
    - nginx
    - https

- name: Copy nginx config for the app
  template: src=default dest=/etc/nginx/sites-available/ owner=root group=root mode=644
  tags: nginx
  notify: nginx reload

- name: Copy across the main Alaveteli config
  template: src=general.yml dest=/srv/www/shared/ owner=deploy group=deploy
  notify: nginx reload
  tags: nginx

#- name: Add alaveteli crontab entry
#  cron: name="foi-alert-tracks" minute="0,10,20,30,40,50" job="/bin/bash -l -c 'sudo /etc/init.d/foi-alert-tracks check'"
#
#- name: Add alaveteli crontab entry
#  cron: name="foi-purge-varnish" minute="0,10,20,30,40,50" job="/bin/bash -l -c 'sudo /etc/init.d/foi-purge-varnish check'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="holidays" minute="0" hour="0" day="1" month="12" job="/bin/bash -l -c '/bin/echo \"A year has passed, please update the bank holidays for the Freedom of Information site, thank you.\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="alert-comment-on-request" minute="9" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production run-with-lockfile -n ./alert-comment-on-request ./script/alert-comment-on-request || echo \"stalled?\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="load-mail-server-logs" minute="31" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production run-with-lockfile -n ./load-mail-server-logs ./script/load-mail-server-logs || echo \"stalled?\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="update-xapian-index" minute="0,5,10,15,20,25,30,35,40,45,50,55" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production run-with-lockfile -n ./update-xapian-index.lock \"./script/update-xapian-index verbose=true\" >> ./log/update-xapian-index.log || echo \"stalled?\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="delete-old-things" minute="23" hour="4" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production run-with-lockfile -n ./delete-old-things ./script/delete-old-things || echo \"stalled?\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="alert-overdue-requests" minute="0" hour="6" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production run-with-lockfile -n ./alert-overdue-requests ./script/alert-overdue-requests || echo \"stalled?\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="alert-new-response-reminders" minute="0" hour="7" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production run-with-lockfile -n ./alert-new-response-reminders ./script/alert-new-response-reminders || echo \"stalled?\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="alert-not-clarified-request" minute="0" hour="8" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production run-with-lockfile -n ./alert-not-clarified-request ./script/alert-not-clarified-request || echo \"stalled?\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="check-recent-requests-sent" minute="2" hour="4" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production run-with-lockfile -n ./check-recent-requests-sent ./script/check-recent-requests-sent || echo \"stalled?\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="stop-new-responses-on-old-requests" minute="45" hour="3" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production run-with-lockfile -n ./stop-new-responses-on-old-requests ./script/stop-new-responses-on-old-requests || echo \"stalled?\"'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="request-creation-graph" minute="43" hour="2" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production ./script/request-creation-graph'"
#
#- name: Add alaveteli crontab entry
#  cron: user=deploy name="user-use-graph" minute="48" hour="2" job="/bin/bash -l -c 'cd /srv/www/current && RAILS_ENV=production ./script/user-use-graph'"

- name: Add deploy user to adm group so it can read mail logs
  user:
    name: deploy
    groups: adm
    append: yes

- name: Copy run-with-rbenv-path for postfix
  copy:
    src: run-with-rbenv-path
    dest: /usr/bin/run-with-rbenv-path
    mode: 0755
  tags: postfix
  notify:
    - reload postfix

- name: Set the hostname
  command: hostname {{ alaveteli_host }}
  tags: hostname
  notify:
    - reload postfix

- name: Point host to localhost
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ alaveteli_host }}.*"
    line: "127.0.0.1    {{ alaveteli_host }}"
    create: true
  tags: hostname
  notify:
    - reload postfix

- name: Set the alaveteli name in mailname
  lineinfile:
    dest: /etc/mailname
    regexp: ".*"
    line: "{{ alaveteli_host }}"
    create: true
  tags: mailname postfix
  notify:
    - reload postfix

- name: Copy postfix scripts for daemons
  template:
    dest: /etc/{{ item }}
    src: "{{ item }}"
    mode: 0644
  with_items:
    - postfix/main.cf
    - postfix/master.cf
    - postfix/recipient_bcc
    - postfix/recipients
    - postfix/transports
  tags: postfix
  notify:
    - reload postfix

- name: "Include Andreaswolf's letsencrypt role tasks"
  include: '../../andreaswolf.letsencrypt/tasks/main.yml'
  tags: [ 'letsencrypt', 'nondev' ]

- name: Enable TLS in Nginx configs
  lineinfile:
    dest: /etc/nginx/sites-enabled/default
    regexp: '(.*)#{{ item }}(.*)'
    line: '\1{{ item }}\2'
    backrefs: 'yes'
    state: present
  with_items:
    - "ssl on"
    - "ssl_certificate "
    - "ssl_certificate_key "
    - "ssl_protocols "
    - "ssl_prefer_server_ciphers "
    - "ssl_session_cache "
    - "ssl_ciphers "
  tags: [ 'letsencrypt', 'nondev', 'https' ]
  notify: nginx reload

- name: Check if general.yml exists
  stat: path=/srv/www/current/config/general.yml
  register: general_yml
  tags:
    - nginx
    - https
    - letsencrypt

- name: Set FORCE_SSL to true
  lineinfile:
    dest: /srv/www/current/config/general.yml
    regexp: '(.*)FORCE_SSL:(.*)'
    line: 'FORCE_SSL: true'
    state: present
  when: general_yml.stat.exists == True
  tags: [ 'https', 'nondev' ]
  notify:
    - nginx reload
