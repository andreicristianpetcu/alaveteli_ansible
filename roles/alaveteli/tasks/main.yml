---
- include_vars: encrypted.yml

- name: Ensure that deploy owns /srv/www and /srv/www/shared
  file:
    state: directory
    owner: deploy
    group: deploy
    path: "{{item}}"
  become: true
  become_method: sudo
  with_items:
    - /srv/www
    - /srv/www/shared

# Installing via bash so that rbenv is used. Otherwise would install gems for default system ruby
# TODO When gem is already installed stop it from saying something has changed
- name: Install bundler gem
  command: bash -lc "gem install bundler"
  # sudo: true
  # sudo_user: deploy
  become: true
  become_method: sudo
  become_user: "deploy"

- name: Add mySociety Debian Package Repository key
  apt_key: url="https://debian.mysociety.org/debian.mysociety.org.gpg.key"
  args:
    validate_certs: false

- name: Add mySociety Debian Package Repository
  apt_repository: repo="deb http://debian.mysociety.org squeeze main"

- name: Install packages required by Alaveteli
  apt: name={{ item }} state=present
  with_items:
    - libicu-dev
    - libmagic-dev
    - libmagickwand-dev
    - xapian-tools
    - uuid-dev
    - wkhtmltopdf-static
    - pdftk
    - imagemagick
    - wv
    - language-pack-ro
    - unzip
    - poppler-utils
    - elinks
    - ruby-rails
    - libsqlite3-dev
  tags:
    - apt-get
    - packages

- name: Install lockfile-progs for run-with-lockfile.sh
  apt: name=lockfile-progs

- name: Link run-with-lockfile.sh so is not available system-wide
  file:
    src: "/srv/www/current/commonlib/bin/run-with-lockfile.sh"
    dest: "/usr/bin/run-with-lockfile"
    state: link
    force: yes

- include: create_postgresqldb.yml

- name: Copy over database configuration for application
  template: src=database.yml dest=/srv/www/shared/database.yml owner=deploy group=deploy
  notify: nginx reload
  tags: nginx

- name: Copy init scripts for daemons
  copy:
    dest: /etc/init.d/
    src: "{{ item }}"
    mode: 0755
  with_items:
    - foi-alert-tracks
    - foi-purge-varnish
  tags: startup

- name: Create ACME nginx folder
  file: path=/etc/letsencrypt/webrootauth/.well-known/acme-challenge state=directory mode=0755
  tags: nginx
  notify: nginx restart

- name: Generate the overall nginx config
  template: src=nginx.conf dest=/etc/nginx/nginx.conf
  tags: nginx
  notify: nginx reload

- name: Copy test/test password for staging site
  copy:
    src: htpasswd
    dest: /etc/nginx/
  notify: nginx reload
  tags: nginx

- name: Create LE user
  user:
    name: '{{ letsencrypt_user }}'
    home: '{{ acme_tiny_data_directory }}'
    system: yes

- name: Create LE group
  group:
    name: '{{ letsencrypt_group }}'
    system: yes

- name: Copy hardcoded certs for alaveteli.org.dev
  template: src="roles/alaveteli/files/certificates/{{ item }}" dest="/etc/ssl/{{ item }}" owner=root group=root mode=644
  with_items:
    - alaveteli.org.dev.pem
    - private/alaveteli.org.dev.key
  tags:
    - alaveteliorgdev
    - https
  notify: nginx reload

- name: Ensure letsencrypt challange dir exists
  file:
    path: "{{ acme_tiny_challenges_directory }}"
    state: directory
    owner: "{{ letsencrypt_user }}"
    group: "{{ letsencrypt_group }}"
    mode: 0755
  notify: nginx reload
  tags:
    - nginx
    - https

- name: Put a dummy file in LE folder
  file:
    path: "{{ acme_tiny_challenges_directory }}/dummy.txt"
    state: touch
    mode: 0644
    owner: "{{ letsencrypt_user }}"
    group: "{{ letsencrypt_group }}"
  notify: nginx reload
  tags:
    - nginx
    - https

- name: Copy nginx proxy configs
  template:
    dest: /etc/nginx/proxy.conf
    src: "proxy.conf"
    mode: 0644
  tags:
    - varnish
    - nginx
    - https
  notify:
    - nginx reload

- name: Copy nginx config for the app
  template: src={{ item }} dest="/etc/nginx/sites-available/{{ item }}" owner=root group=root mode=644
  with_items:
    - alaveteli_http
    - alaveteli_https
    - https_to_varnish_proxy
    - default
  tags: nginx
  notify: nginx reload

- name: Enable dumb default http for LE
  file: src="/etc/nginx/sites-available/{{ item }}" dest="/etc/nginx/sites-enabled/{{ item }}" owner=root group=root state=link
  with_items:
    - default
  tags: asymlink
  notify: nginx reload

- name: Copy across the main Alaveteli config
  template: src=general.yml dest=/srv/www/shared/ owner=deploy group=deploy
  notify:
    - nginx reload
  tags: nginx, generalyml

- include: config_cron_jobs.yml
  tags: cron

- name: Add deploy user to adm group so it can read mail logs
  user:
    name: deploy
    groups: adm
    append: yes

- name: Copy run-with-rbenv-path for postfix
  copy:
    src: run-with-rbenv-path
    dest: /usr/bin/run-with-rbenv-path
    mode: 0755
  tags: postfix
  notify:
    - reload postfix

- name: Set the hostname
  command: hostname {{ alaveteli_host }}
  tags: hostname
  notify:
    - reload postfix

- name: Point host to localhost
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ alaveteli_host }}.*"
    line: "127.0.0.1    {{ alaveteli_host }}"
    create: true
  tags: hostname
  notify:
    - reload postfix

- name: Set the alaveteli name in mailname
  lineinfile:
    dest: /etc/mailname
    regexp: ".*"
    line: "{{ alaveteli_host }}"
    create: true
  tags: mailname postfix
  notify:
    - reload postfix

- name: Copy postfix scripts for daemons
  template:
    dest: /etc/{{ item }}
    src: "{{ item }}"
    mode: 0644
  with_items:
    - postfix/main.cf
    - postfix/master.cf
    - postfix/recipient_bcc
    - postfix/recipients
    - postfix/transports
  tags: postfix
  notify:
    - reload postfix

- name: Flush handlers for LE and Nginx
  meta: flush_handlers

- name: "Include Andreaswolf's letsencrypt role tasks"
  include: '../../andreaswolf.letsencrypt/tasks/main.yml'
  tags: [ 'letsencrypt', 'nondev' ]

- name: Load lets encrypt ROOT CA 
  shell: cat roles/alaveteli/files/certificates/DSTRootCAX3.crt
  register: letsencrypt_rootca  
  tags: [ 'certificatechain', 'nondev', 'letsencrypt']
  delegate_to: localhost
  changed_when: false

- name: Load lets encrypt Intermediary CA
  shell: cat roles/alaveteli/files/certificates/lets-encrypt-x3-cross-signed.pem
  register: letsencrypt_intermediary
  tags: [ 'certificatechain', 'nondev', 'letsencrypt']
  delegate_to: localhost
  changed_when: false

- name: Load lets encrypt Intermediary CA
  shell: "cat /etc/ssl/{{ alaveteli_host }}.crt"
  register: letsencrypt_certificate
  tags: [ 'certificatechain', 'nondev', 'letsencrypt']

- name: Generate cetificate with root, intermediary and host certs
  template: src=certificatechain.pem dest="/etc/ssl/{{ alaveteli_host }}.pem" owner=root group=root mode=0644
  notify: nginx reload
  tags: [ 'certificatechain', 'nondev', 'nginx', 'letsencrypt']
  changed_when: false

- name: Generate strong DH params
  shell: "openssl dhparam -out /etc/ssl/private/{{ alaveteli_host }}_dhparams.pem 2048"
  args:
    creates: "/etc/ssl/private/{{ alaveteli_host }}_dhparams.pem"
  tags: [ 'dhparams', 'https', 'dhparams' ]
  notify: nginx reload

- name: Remove default nginx site
  file: path=/etc/nginx/sites-enabled/default owner=root group=root state=absent
  tags: nginx
  notify: nginx reload

- name: Enable TLS in Nginx configs
  lineinfile:
    dest: /etc/nginx/sites-available/alaveteli_https
    regexp: '(.*)#{{ item }}(.*)'
    line: '\1{{ item }}\2'
    backrefs: 'yes'
    state: present
  with_items:
    - "ssl on"
    - "ssl_certificate "
    - "ssl_certificate_key "
    - "ssl_protocols "
    - "ssl_prefer_server_ciphers "
    - "ssl_session_cache "
    - "ssl_ciphers "
    - "ssl_dhparam "
  tags: [ 'letsencrypt', 'nondev', 'https', 'nginx']
  notify: nginx reload

- name: Check if general.yml exists
  stat: path=/srv/www/current/config/general.yml
  register: general_yml
  tags:
    - nginx
    - https
    - letsencrypt

- name: Set FORCE_SSL to true
  lineinfile:
    dest: /srv/www/current/config/general.yml
    regexp: '(.*)FORCE_SSL:(.*)'
    line: 'FORCE_SSL: true'
    state: present
  when: general_yml.stat.exists == True
  tags: [ 'https', 'nondev' ]
  notify:
    - nginx reload

- name: Check rails env file
  stat: path=/srv/www/current/config/rails_env.rb
  register: rails_env_file
  tags: nginx

- name: Set default environment to production
  lineinfile:
    dest: /srv/www/current/config/rails_env.rb
    line: "ENV['RAILS_ENV'] = 'production'"
    create: true
  when: rails_env_file.stat.exists == true
  tags: nginx
  notify:
    - nginx reload

- name: Install varnish
  apt: name={{ item }} state=present
  with_items:
    - varnish
  tags:
    - apt-get
    - packages
    - varnish

- name: Copy varnish configs
  template:
    dest: /etc/default/varnish
    src: "varnish/etc_varnish"
    mode: 0644
  tags: varnish
  notify:
    - varnish restart

- name: Copy varnish backend
  template:
    dest: /etc/{{ item }}
    src: "{{ item }}"
    mode: 0644
  with_items:
    - varnish/varnish-alaveteli.vcl
  tags: varnish
  notify:
    - varnish restart

- name: Enable alaveteli https nginx sites
  file: src="/etc/nginx/sites-available/{{ item }}" dest="/etc/nginx/sites-enabled/{{ item }}" owner=root group=root state=link
  with_items:
    - alaveteli_http
    - alaveteli_https
    - https_to_varnish_proxy
  tags: [ 'https' ]
  notify: nginx reload
